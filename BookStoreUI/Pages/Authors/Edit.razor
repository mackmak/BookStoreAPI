@page "/authors/edit/{Id}"

@inject IAuthorRepository _authorRepository
@inject NavigationManager _navigationManager

<h3>Edit Author</h3>

@if (hasFailed)
{
    <div class="alert alert-danger">
        <p>
            Update failed. Please check with the administration.
        </p>
    </div>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Author..." />
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator />is
        <ValidationSummary />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Model.FirstName" class="form-control" id="firstname" />
        </div>

        <div class="form-group">
            <label for="firstname">Last Name</label>
            <InputText @bind-Value="Model.LastName" class="form-control" id="lastname" />
        </div>

        <div class="form-group">
            <label for="firstname">Biography</label>
            <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
        </div>

        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil" />
            Edit Author
        </button>
    </EditForm>

}

<BackToListShared NavigationManager="_navigationManager" Url="/authors/" />

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();
    bool hasFailed = false;

    protected override async Task OnInitializedAsync()
    {
        Model = await _authorRepository.Get(Endpoints.AuthorsEndpoint,
            Convert.ToInt32(Id));
    }

    private async Task EditAuthor()
    {
        try
        {
            bool isSuccessful = await _authorRepository.Update(
                Endpoints.AuthorsEndpoint, Model, Model.Id);
            if (isSuccessful)
            {
                _navigationManager.NavigateTo("/authors/");
                hasFailed = false;
            }
            else
            {
                hasFailed = true;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

}
